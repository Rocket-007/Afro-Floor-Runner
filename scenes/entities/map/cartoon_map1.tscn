[gd_scene load_steps=47 format=2]

[ext_resource path="res://Scenes/spawner/spawner.tscn" type="PackedScene" id=10]
[ext_resource path="res://fonts/Helvetica 700_WhatsApp.ttf" type="DynamicFontData" id=12]
[ext_resource path="res://imgs/gradient.png" type="Texture" id=15]
[ext_resource path="res://Scenes/Menus/Settings/settings.tscn" type="PackedScene" id=17]
[ext_resource path="res://Scenes/Menus/Info_board/Info_board.tscn" type="PackedScene" id=18]
[ext_resource path="res://fonts/Kenney Bold.ttf" type="DynamicFontData" id=19]
[ext_resource path="res://scenes/entities/player/character.tscn" type="PackedScene" id=20]
[ext_resource path="res://Scenes/Menus/UI diaplay/UI_Info_display.tscn" type="PackedScene" id=21]

[sub_resource type="AtlasTexture" id=17]
region = Rect2( 180, 100, 238, 243 )

[sub_resource type="DynamicFont" id=1]
size = 106
font_data = ExtResource( 12 )

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Label:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -611.5, 214.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Label:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=4]
resource_name = "wave_open_new"
length = 2.5
tracks/0/type = "value"
tracks/0/path = NodePath("Label:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1.7, 1.9, 2.4 ),
"transitions": PoolRealArray( 0.321239, 1, 0.296217, 0.43557, 1 ),
"update": 0,
"values": [ Vector2( -595.5, 164.5 ), Vector2( 308.5, 163.5 ), Vector2( 308.5, 164.5 ), Vector2( 208.5, 164.5 ), Vector2( 1204.5, 164.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Label:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 2.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Shader" id=96]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 96 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 8.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="StyleBoxFlat" id=167]
bg_color = Color( 0.0588235, 0.0588235, 0.117647, 0.854902 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 0, 0, 0, 0.764706 )
corner_radius_top_left = 50
corner_radius_top_right = 10
corner_radius_bottom_right = 50
corner_radius_bottom_left = 10
expand_margin_top = 3.0

[sub_resource type="Shader" id=266]
code = "/*
	動的電子背景シェーダー by あるる（きのもと 結衣） @arlez80
	Procedural Electric Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;

uniform vec4 background_color : hint_color = vec4( 0.0, 0.0, 0.0, 1.0 );
uniform vec4 line_color : hint_color = vec4( 0.0, 1.0, 1.0, 1.0 );
uniform float line_freq = 9.56;
uniform float height = 0.6;
uniform float speed = 0.8;
uniform vec2 scale = vec2( 2.0, 16.0 );

void fragment( )
{
	vec2 uv = UV * scale;
	float shift = cos( floor( uv.y ) );
	uv.x += shift;

	float freq = clamp( cos( uv.x * line_freq ) * 3.0, 0.0, 1.0 ) * height;
	float line = 1.0 - clamp( abs( freq - mod( uv.y, 1.0 ) ) * 11.0, 0.0, 1.0 );

	COLOR = mix( background_color, line_color, line * mod( uv.x - TIME * speed * abs( shift ), 1.0 ) /*  * mod( TIME + shift, 1.0 ) */ );
}"

[sub_resource type="ShaderMaterial" id=132]
shader = SubResource( 266 )
shader_param/background_color = Color( 0, 0, 0, 0 )
shader_param/line_color = Color( 0, 1, 1, 1 )
shader_param/line_freq = 9.56
shader_param/height = 0.6
shader_param/speed = 0.8
shader_param/scale = Vector2( 2, 16 )

[sub_resource type="StyleBoxFlat" id=267]
bg_color = Color( 0, 0, 0, 0.329412 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.2, 0.27451, 0.278431, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=268]
bg_color = Color( 0.6, 0.6, 0.6, 0 )
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=269]
bg_color = Color( 0.490196, 0.737255, 0.741176, 0.270588 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=270]
bg_color = Color( 0.454902, 0.866667, 0.890196, 0.364706 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=271]
bg_color = Color( 0.12549, 0.196078, 0.2, 0.364706 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=272]
bg_color = Color( 0.454902, 0.866667, 0.890196, 0.0392157 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
border_blend = true
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=273]
bg_color = Color( 0, 0.996078, 0.94902, 1 )

[sub_resource type="StyleBoxFlat" id=274]
bg_color = Color( 0.00392157, 0.00392157, 0.00392157, 0 )
border_width_left = 10
border_color = Color( 0, 0, 0, 0.168627 )

[sub_resource type="Theme" id=250]
Button/colors/font_color = Color( 0.88, 0.88, 0.88, 1 )
Button/colors/font_color_disabled = Color( 0.9, 0.9, 0.9, 0.2 )
Button/colors/font_color_focus = Color( 0.94, 0.94, 0.94, 1 )
Button/colors/font_color_hover = Color( 0.94, 0.94, 0.94, 1 )
Button/colors/font_color_pressed = Color( 1, 1, 1, 1 )
Button/constants/hseparation = 2
Button/styles/disabled = SubResource( 267 )
Button/styles/focus = SubResource( 268 )
Button/styles/hover = SubResource( 269 )
Button/styles/normal = SubResource( 270 )
Button/styles/pressed = SubResource( 271 )
LineEdit/colors/clear_button_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/clear_button_color_pressed = Color( 1, 1, 1, 1 )
LineEdit/colors/cursor_color = Color( 0.94, 0.94, 0.94, 1 )
LineEdit/colors/font_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/font_color_selected = Color( 0, 0, 0, 1 )
LineEdit/colors/font_color_uneditable = Color( 0.88, 0.88, 0.88, 0.5 )
LineEdit/colors/selection_color = Color( 0.49, 0.49, 0.49, 1 )
LineEdit/constants/minimum_spaces = 12
LineEdit/styles/normal = SubResource( 272 )
VScrollBar/styles/grabber = SubResource( 273 )
VScrollBar/styles/scroll = SubResource( 274 )

[sub_resource type="DynamicFont" id=92]
size = 35
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=166]
size = 46
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=149]
size = 35
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=184]
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 19 )

[sub_resource type="StyleBoxFlat" id=251]
bg_color = Color( 0.0588235, 0.0588235, 0.117647, 0.854902 )
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color( 0, 0, 0, 0.764706 )
corner_radius_top_left = 50
corner_radius_top_right = 10
corner_radius_bottom_right = 50
corner_radius_bottom_left = 10
expand_margin_top = 3.0

[sub_resource type="Shader" id=93]
code = "/*
	動的電子背景シェーダー by あるる（きのもと 結衣） @arlez80
	Procedural Electric Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;

uniform vec4 background_color : hint_color = vec4( 0.0, 0.0, 0.0, 1.0 );
uniform vec4 line_color : hint_color = vec4( 0.0, 1.0, 1.0, 1.0 );
uniform float line_freq = 9.56;
uniform float height = 0.6;
uniform float speed = 0.8;
uniform vec2 scale = vec2( 2.0, 16.0 );

void fragment( )
{
	vec2 uv = UV * scale;
	float shift = cos( floor( uv.y ) );
	uv.x += shift;

	float freq = clamp( cos( uv.x * line_freq ) * 3.0, 0.0, 1.0 ) * height;
	float line = 1.0 - clamp( abs( freq - mod( uv.y, 1.0 ) ) * 11.0, 0.0, 1.0 );

	COLOR = mix( background_color, line_color, line * mod( uv.x - TIME * speed * abs( shift ), 1.0 ) /*  * mod( TIME + shift, 1.0 ) */ );
}"

[sub_resource type="ShaderMaterial" id=252]
shader = SubResource( 93 )
shader_param/background_color = Color( 0, 0, 0, 0 )
shader_param/line_color = Color( 0, 1, 1, 1 )
shader_param/line_freq = 9.56
shader_param/height = 0.6
shader_param/speed = 0.8
shader_param/scale = Vector2( 2, 16 )

[sub_resource type="StyleBoxFlat" id=253]
bg_color = Color( 0, 0, 0, 0.329412 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.2, 0.27451, 0.278431, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=254]
bg_color = Color( 0.6, 0.6, 0.6, 0 )
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=255]
bg_color = Color( 0.490196, 0.737255, 0.741176, 0.270588 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=256]
bg_color = Color( 0.454902, 0.866667, 0.890196, 0.364706 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=257]
bg_color = Color( 0.12549, 0.196078, 0.2, 0.364706 )
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
corner_radius_top_left = 30
corner_radius_bottom_right = 30
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=258]
bg_color = Color( 0.454902, 0.866667, 0.890196, 0.0392157 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 0.352941, 0.796078, 0.827451, 1 )
border_blend = true
expand_margin_top = 3.0

[sub_resource type="StyleBoxFlat" id=259]
bg_color = Color( 0, 0.996078, 0.94902, 1 )

[sub_resource type="StyleBoxFlat" id=260]
bg_color = Color( 0.00392157, 0.00392157, 0.00392157, 0 )
border_width_left = 10
border_color = Color( 0, 0, 0, 0.168627 )

[sub_resource type="Theme" id=261]
Button/colors/font_color = Color( 0.88, 0.88, 0.88, 1 )
Button/colors/font_color_disabled = Color( 0.9, 0.9, 0.9, 0.2 )
Button/colors/font_color_focus = Color( 0.94, 0.94, 0.94, 1 )
Button/colors/font_color_hover = Color( 0.94, 0.94, 0.94, 1 )
Button/colors/font_color_pressed = Color( 1, 1, 1, 1 )
Button/constants/hseparation = 2
Button/styles/disabled = SubResource( 253 )
Button/styles/focus = SubResource( 254 )
Button/styles/hover = SubResource( 255 )
Button/styles/normal = SubResource( 256 )
Button/styles/pressed = SubResource( 257 )
LineEdit/colors/clear_button_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/clear_button_color_pressed = Color( 1, 1, 1, 1 )
LineEdit/colors/cursor_color = Color( 0.94, 0.94, 0.94, 1 )
LineEdit/colors/font_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/font_color_selected = Color( 0, 0, 0, 1 )
LineEdit/colors/font_color_uneditable = Color( 0.88, 0.88, 0.88, 0.5 )
LineEdit/colors/selection_color = Color( 0.49, 0.49, 0.49, 1 )
LineEdit/constants/minimum_spaces = 12
LineEdit/styles/normal = SubResource( 258 )
VScrollBar/styles/grabber = SubResource( 259 )
VScrollBar/styles/scroll = SubResource( 260 )

[sub_resource type="DynamicFont" id=262]
size = 35
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=263]
size = 35
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=264]
size = 46
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=265]
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 19 )

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="spawner" parent="." instance=ExtResource( 10 )]
position = Vector2( 3138, 912 )
resource = ExtResource( 20 )

[node name="spawner4" parent="." instance=ExtResource( 10 )]
position = Vector2( 6042, 912 )
resource = ExtResource( 20 )

[node name="spawner3" parent="." instance=ExtResource( 10 )]
position = Vector2( 4146, 912 )
resource = ExtResource( 20 )

[node name="spawner2" parent="." instance=ExtResource( 10 )]
position = Vector2( 5034, 912 )
resource = ExtResource( 20 )

[node name="TreeProps" parent="." instance=ExtResource( 20 )]

[node name="Ground_map" parent="." instance=ExtResource( 20 )]

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
scroll_ignore_camera_zoom = true

[node name="outpost" type="TextureRect" parent="ParallaxBackground"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
expand = true

[node name="sky_and_cloud" type="TextureRect" parent="ParallaxBackground"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
expand = true

[node name="Gradient" type="TextureRect" parent="ParallaxBackground"]
visible = false
modulate = Color( 0.572549, 0.682353, 0.984314, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 15 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="night_outpost" type="TextureRect" parent="ParallaxBackground"]
anchor_right = 1.0
anchor_bottom = 1.0
expand = true

[node name="sun" type="Sprite" parent="ParallaxBackground"]
visible = false
modulate = Color( 0.870588, 1, 0, 0.894118 )
position = Vector2( 958, 126 )
scale = Vector2( 0.941177, 1 )
texture = SubResource( 17 )

[node name="TweenSky" type="Tween" parent="ParallaxBackground"]

[node name="Guns" parent="." instance=ExtResource( 20 )]
position = Vector2( -392, 367 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
volume_db = -12.0

[node name="debug_overlay" parent="." instance=ExtResource( 20 )]

[node name="Wave_animations_canvas" type="CanvasLayer" parent="."]

[node name="Label" type="Label" parent="Wave_animations_canvas"]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -611.5
margin_top = 214.5
margin_right = -204.5
margin_bottom = 321.5
custom_fonts/font = SubResource( 1 )
text = "WAVE 1"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Wave_animations_canvas"]
anims/RESET = SubResource( 3 )
anims/wave_open_new = SubResource( 4 )

[node name="Shader_Canvas_Top" type="CanvasLayer" parent="."]

[node name="ColorRec shader" type="TextureRect" parent="Shader_Canvas_Top"]
visible = false
material = SubResource( 19 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
expand = true

[node name="ControlsCanvas" type="CanvasLayer" parent="."]
layer = 5

[node name="Control" type="Control" parent="ControlsCanvas"]
modulate = Color( 1, 1, 1, 0.207843 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TouchScreenButton" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 128, 56.0001 )
scale = Vector2( 2.21875, 2.21875 )
action = "w"
visibility_mode = 1

[node name="TouchScreenButton13" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 1000, 240 )
scale = Vector2( 1.71875, 1.71875 )
action = "w"
visibility_mode = 1

[node name="TouchScreenButton11" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 172, 214 )
scale = Vector2( 2.09375, 2.09375 )
action = "w"
visibility_mode = 1

[node name="TouchScreenButton10" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 411, 496 )
scale = Vector2( 1.375, 1.375 )
action = "zoom_in"
visibility_mode = 1

[node name="TouchScreenButton12" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 507, 496 )
scale = Vector2( 1.375, 1.375 )
action = "zoom_out"
visibility_mode = 1

[node name="TouchScreenButton2" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 176, 456 )
scale = Vector2( 1.96875, 1.96875 )
action = "s"
visibility_mode = 1

[node name="TouchScreenButton3" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 262, 338 )
scale = Vector2( 1.95312, 1.95312 )
action = "d"
visibility_mode = 1

[node name="TouchScreenButton4" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 82, 336 )
scale = Vector2( 1.96875, 1.96875 )
action = "a"
visibility_mode = 1

[node name="TouchScreenButton6" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 878, 294 )
scale = Vector2( 2.15625, 2.15625 )
action = "ui_up"
visibility_mode = 1

[node name="TouchScreenButton7" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 878, 448 )
scale = Vector2( 1.90625, 1.90625 )
action = "ui_down"
visibility_mode = 1

[node name="TouchScreenButton5" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 698, 520 )
scale = Vector2( 0.718751, 0.71875 )
action = "KEY_R"
visibility_mode = 1

[node name="TouchScreenButton14" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 746, 520 )
scale = Vector2( 0.718751, 0.71875 )
action = "Q"
visibility_mode = 1

[node name="TouchScreenButton15" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 794, 520 )
scale = Vector2( 0.718751, 0.71875 )
action = "settings"
visibility_mode = 1

[node name="TouchScreenButton9" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 786, 360 )
scale = Vector2( 2.09375, 2.09375 )
action = "ui_left"
visibility_mode = 1

[node name="TouchScreenButton8" type="TouchScreenButton" parent="ControlsCanvas/Control"]
position = Vector2( 982, 343 )
scale = Vector2( 2.14062, 2.14062 )
action = "ui_right"
visibility_mode = 1

[node name="outofbound_area" type="Area2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="outofbound_area"]
position = Vector2( -1150, -576 )
scale = Vector2( 1.0783, 1.21943 )
polygon = PoolVector2Array( -4300, -1598, -4318, 4714, 15329, 4739, 15352, -1801, -3644, -1785, -3643, -10602, 18359, -10586, 18412, 6970, -7222, 7060, -7192, -2115 )

[node name="PauseCanvas" type="CanvasLayer" parent="."]
pause_mode = 2
layer = 6

[node name="Pause" type="Panel" parent="PauseCanvas"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 177.0
margin_top = 104.0
margin_right = -178.0
margin_bottom = -104.0
custom_styles/panel = SubResource( 167 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="shader" type="Panel" parent="PauseCanvas/Pause"]
self_modulate = Color( 1, 1, 1, 0.329412 )
material = SubResource( 132 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="quit" type="Button" parent="PauseCanvas/Pause"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 24.0
margin_top = -105.0
margin_right = 294.0
margin_bottom = -48.0
theme = SubResource( 250 )
custom_fonts/font = SubResource( 92 )
text = "QUIT"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="resume" type="Button" parent="PauseCanvas/Pause"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -294.0
margin_top = -105.0
margin_right = -24.0
margin_bottom = -48.0
theme = SubResource( 250 )
custom_fonts/font = SubResource( 92 )
text = "RESUME"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="PauseCanvas/Pause"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -128.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="PauseCanvas/Pause/Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="PauseCanvas/Pause/Control/VBoxContainer"]
margin_right = 669.0
margin_bottom = 40.0
rect_min_size = Vector2( 0, 40 )

[node name="paused" type="Label" parent="PauseCanvas/Pause/Control/VBoxContainer"]
margin_top = 44.0
margin_right = 669.0
margin_bottom = 91.0
custom_fonts/font = SubResource( 166 )
text = "PAUSED"
align = 1

[node name="settings" parent="PauseCanvas" instance=ExtResource( 17 )]
pause_mode = 2
visible = false

[node name="game_over" type="Panel" parent="PauseCanvas"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 177.0
margin_top = 104.0
margin_right = -178.0
margin_bottom = -104.0
custom_styles/panel = SubResource( 167 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="shader" type="Panel" parent="PauseCanvas/game_over"]
self_modulate = Color( 1, 1, 1, 0.329412 )
material = SubResource( 132 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="quit" type="Button" parent="PauseCanvas/game_over"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 24.0
margin_top = -105.0
margin_right = 294.0
margin_bottom = -48.0
theme = SubResource( 250 )
custom_fonts/font = SubResource( 149 )
text = "QUIT"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="restart" type="Button" parent="PauseCanvas/game_over"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -294.0
margin_top = -105.0
margin_right = -24.0
margin_bottom = -48.0
theme = SubResource( 250 )
custom_fonts/font = SubResource( 149 )
text = "RESTART"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="PauseCanvas/game_over"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -128.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="PauseCanvas/game_over/Control"]
anchor_right = 1.0
anchor_bottom = 1.0
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="PauseCanvas/game_over/Control/VBoxContainer"]
margin_top = 4.0
margin_right = 669.0
margin_bottom = 44.0
rect_min_size = Vector2( 0, 40 )

[node name="Game_over" type="Label" parent="PauseCanvas/game_over/Control/VBoxContainer"]
margin_top = 48.0
margin_right = 669.0
margin_bottom = 95.0
custom_fonts/font = SubResource( 166 )
text = "GAME OVER"
align = 1

[node name="new_high_score" type="Label" parent="PauseCanvas/game_over/Control/VBoxContainer"]
visible = false
margin_top = 95.0
margin_right = 669.0
margin_bottom = 119.0
custom_colors/font_color = Color( 0.329412, 0.964706, 0.92549, 1 )
custom_fonts/font = SubResource( 184 )
text = "NEW HIGH SCORE"
align = 1

[node name="Control" parent="PauseCanvas/game_over/Control/VBoxContainer" instance=ExtResource( 18 )]

[node name="deathMatch_scoreBoard" type="Panel" parent="PauseCanvas"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 177.0
margin_top = 104.0
margin_right = -178.0
margin_bottom = -104.0
custom_styles/panel = SubResource( 251 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="shader" type="Panel" parent="PauseCanvas/deathMatch_scoreBoard"]
self_modulate = Color( 1, 1, 1, 0.329412 )
material = SubResource( 252 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="quit" type="Button" parent="PauseCanvas/deathMatch_scoreBoard"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 24.0
margin_top = -105.0
margin_right = 294.0
margin_bottom = -48.0
theme = SubResource( 261 )
custom_fonts/font = SubResource( 262 )
text = "QUIT"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="resume" type="Button" parent="PauseCanvas/deathMatch_scoreBoard"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -294.0
margin_top = -105.0
margin_right = -24.0
margin_bottom = -48.0
theme = SubResource( 261 )
custom_fonts/font = SubResource( 263 )
text = "RESUME"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="PauseCanvas/deathMatch_scoreBoard"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -334.5
margin_right = 334.5
margin_bottom = 264.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="PauseCanvas/deathMatch_scoreBoard/Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -334.5
margin_top = -137.5
margin_right = 334.5
margin_bottom = 137.5
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="PauseCanvas/deathMatch_scoreBoard/Control/VBoxContainer"]
margin_top = 20.0
margin_right = 669.0
margin_bottom = 40.0
rect_min_size = Vector2( 0, 20 )

[node name="Game_over" type="Label" parent="PauseCanvas/deathMatch_scoreBoard/Control/VBoxContainer"]
margin_top = 44.0
margin_right = 669.0
margin_bottom = 91.0
custom_fonts/font = SubResource( 264 )
text = "GAME OVER"
align = 1

[node name="new_high_score" type="Label" parent="PauseCanvas/deathMatch_scoreBoard/Control/VBoxContainer"]
visible = false
margin_top = 95.0
margin_right = 669.0
margin_bottom = 119.0
custom_colors/font_color = Color( 0.329412, 0.964706, 0.92549, 1 )
custom_fonts/font = SubResource( 265 )
text = "NEW HIGH SCORE"
align = 1

[node name="Control" parent="PauseCanvas/deathMatch_scoreBoard/Control/VBoxContainer" instance=ExtResource( 18 )]
margin_top = 95.0
margin_bottom = 255.0

[node name="Screen_images_timer" type="Timer" parent="."]
wait_time = 0.3
autostart = true

[node name="UI_Info_display" parent="." instance=ExtResource( 21 )]

[node name="deathMatch_round_time" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[connection signal="tree_exited" from="." to="." method="_on_Control_tree_exited"]
[connection signal="tree_exiting" from="." to="." method="_on_Control_tree_exiting"]
[connection signal="tween_all_completed" from="ParallaxBackground/TweenSky" to="." method="_on_TweenSky_tween_all_completed"]
[connection signal="body_entered" from="outofbound_area" to="outofbound_area" method="_on_outofbound_area_body_entered"]
[connection signal="pressed" from="PauseCanvas/Pause/quit" to="." method="_on_quit_pressed"]
[connection signal="pressed" from="PauseCanvas/Pause/resume" to="." method="_on_resume_pressed"]
[connection signal="pressed" from="PauseCanvas/game_over/quit" to="." method="_on_quit_pressed"]
[connection signal="pressed" from="PauseCanvas/game_over/restart" to="." method="_on_restart_pressed"]
[connection signal="timeout" from="Screen_images_timer" to="." method="_on_Screen_images_timer_timeout"]
